@inherits ComponentBase

@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject LocalStorageService LocalStorageService

@if (!string.IsNullOrWhiteSpace(tabName))
{
    <TabHeader Name=@tabName HandleInput=HandleInput InputPlaceholder=@($"Search {tabName}") />

    <div class="main-content grid w-[90vw] gap-2">
        @if (_codesFiltered?.Any() ?? false)
        {
            foreach (KeyValuePair<string, CodeModel> code in _codesFiltered)
            {
                <CodeRectangle Code=code.Value HandleClick='() => NavigationManager.NavigateTo($"/details/{code.Key}")' />
            }
        }
        else
        {
            <h1 class="mt-20 text-3xl font-bold">@($"No {tabName}")</h1>
        }
    </div>

    <TabBar />
}

@code {
    protected string? tabName;
    protected Dictionary<string, CodeModel> codes = [];

    private Dictionary<string, CodeModel> _codesFiltered = [];
    private bool _adjustedContentMargin;

    /// <summary>
    /// Adjusts content margin according to TabHeader and TabBar
    /// </summary>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!string.IsNullOrWhiteSpace(tabName) && !_adjustedContentMargin)
        {
            await JSRuntime.InvokeVoidAsync("adjustContentMargin");
            _adjustedContentMargin = true;
        }
    }

    /// <summary>
    /// Sets component parameters and loads derived component data
    /// </summary>
    public override async Task SetParametersAsync(ParameterView parameters)
    {
        await base.SetParametersAsync(parameters);
        await LoadComponentDataAsync(LocalStorageService);
        _codesFiltered = codes;

        await InvokeAsync(StateHasChanged);
    }

    /// <summary>
    /// Loads derived component data
    /// </summary>
    protected virtual async Task LoadComponentDataAsync(LocalStorageService LocalStorageService) =>
        await Task.Yield();

    /// <summary>
    /// Filters list of codes based on search input
    /// </summary>
    private void HandleInput(ChangeEventArgs e)
    {
        string? searchInput = e.Value?.ToString();

        _codesFiltered = string.IsNullOrWhiteSpace(searchInput)
            ? codes
            : codes.Where(code => code.Value.Value?.Contains(searchInput, StringComparison.OrdinalIgnoreCase) ?? false).ToDictionary<string, CodeModel>();
    }
}
