@page "/details/{Id}"

@inject NavigationManager NavigationManager
@inject LocalStorageService LocalStorageService
@inject CodeService CodeService
@inject IJSRuntime JSRuntime

<TabHeader Name="@($"{_code?.Source} {_code?.Format}")" />

<div class="main-content flex w-[90vw] flex-col items-center gap-4">
    @if (_code is not null)
    {
        <h2 class="text-2xl font-semibold text-[--highlight-color]">@_codeType</h2>

        if (!string.IsNullOrWhiteSpace(_imageBase64))
        {
            <img class="w-[70vw] rounded-lg" src="@_imageBase64" />
        }

        <div class="flex w-[90vw] items-center justify-center gap-4">
            <RoundButton IconPath=@($"icons/{(_code.Favorite ?? false ? "" : "not-")}favorite.svg")
                         Text="@((MarkupString)$"{(_code.Favorite ?? false ? "Added" : "Add")} to<br />Favorites")"
                         HandleClick=@(async () => await ToggleFavoriteAsync()) />

            @if (_codeBytes.Length != 0)
            {
                <RoundButton IconPath="icons/image.svg"
                             Text="@((MarkupString)"Save To<br />Gallery")"
                             HandleClick=@(async () => await CodeService.SaveCodeToGalleryAsync(_codeBytes, _code.Format!)) />
                <RoundButton IconPath="icons/share.svg"
                             Text="@((MarkupString)$"Share<br />{_code.Format}")"
                             HandleClick=@(async () => await CodeService.ShareCodeAsync(_codeBytes, _code.Format!)) />
            }
            <RoundButton IconPath="icons/delete.svg"
                         Text="@((MarkupString)$"Delete<br />{_code.Format}")"
                         HandleClick=@(async () => await CodeService.DeleteCodeAsync(_code)) />
        </div>

        <h2 class="mt-2 max-w-[90vw] break-words text-xl font-bold">@_code.Value</h2>
    }
</div>

<TabBar />

@code {
    [Parameter]
    public string? Id { get; set; }

    private CodeModel? _code;
    private string? _codeType;
    private byte[] _codeBytes = [];
    private string? _imageBase64;

    /// <summary>
    /// Adjusts content margin according to TabHeader and TabBar
    /// </summary>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await JSRuntime.InvokeVoidAsync("adjustContentMargin");
    }

    /// <summary>
    /// Sets parameters and generates code bytes and Base64 png image
    /// </summary>
    public override async Task SetParametersAsync(ParameterView parameters)
    {
        await base.SetParametersAsync(parameters);

        _code = await LocalStorageService.GetCodeAsync(Id!);

        if (string.IsNullOrWhiteSpace(_code?.Value) || string.IsNullOrWhiteSpace(_code?.Type) || string.IsNullOrWhiteSpace(_code?.Format))
            return;

        _codeType = _code.Type != "WiFi" ? Regex.Replace(_code.Type!, "(\\B[A-Z])", " $1") : _code.Type;
        CodeService.GenerateCodeBytes(_code, ref _codeBytes);
        CodeService.GetCodeBase64PngImage(_codeBytes, ref _imageBase64);

        StateHasChanged();
    }

    /// <summary>
    /// Toggles favorite property of code and displays toast notification
    /// </summary>
    private async Task ToggleFavoriteAsync()
    {
        if (string.IsNullOrWhiteSpace(_code?.Id))
            return;

        _code = await CodeService.ToggleCodeFavoriteAsync(_code.Id, new CodeModel { Favorite = !_code.Favorite });
        await Toast.Make($"{(_code?.Favorite ?? false ? "Added to" : "Removed from")} Favorites").Show();
    }
}
