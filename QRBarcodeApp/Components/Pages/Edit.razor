@page "/edit/{Id}"

@inject NavigationManager NavigationManager
@inject LocalStorageService LocalStorageService
@inject QRService QRService
@inject IJSRuntime JSRuntime

<TabHeader Name="@($"{_qr?.Source} {_qr?.Format}")" />

<div class="main-content flex w-[90vw] flex-col items-center gap-4">
    @if (_qr is not null)
    {
        <h2 class="text-2xl font-semibold text-[--highlight-color]">@_qr.Type</h2>

        @if (_qr.Format == BarcodeFormats.QRCode.ToString() && !string.IsNullOrWhiteSpace(_qrImageBase64))
        {
            <img class="w-[70vw] rounded-xl" src="@_qrImageBase64" />
        }

        <div class="flex w-[90vw] items-center justify-center gap-4 text-center">
            <RoundButton IconPath=@($"icons/{(_qr.Favorite ?? false ? "" : "not-")}favorite.svg")
                         Text="@((MarkupString)$"{(_qr.Favorite ?? false ? "Added" : "Add")} to<br />Favorites")"
                         HandleClick=@(async () => await ToggleFavoriteAsync()) />

            @if (_qr.Format == BarcodeFormats.QRCode.ToString() && _qrBytes.Any())
            {
                <RoundButton IconPath="icons/image.svg"
                             Text="@((MarkupString)"Save To<br />Gallery")"
                             HandleClick=@(async () => await QRService.SaveQRToGalleryAsync(_qrBytes, _qr.Format)) />
                <RoundButton IconPath="icons/share.svg"
                             Text="@((MarkupString)$"Share<br />{_qr.Format}")"
                             HandleClick=@(async () => await QRService.ShareQRAsync(_qrBytes, _qr.Format)) />
            }
            <RoundButton IconPath="icons/delete.svg"
                         Text="@((MarkupString)$"Delete<br />{_qr.Format}")"
                         HandleClick=@(async () => await QRService.DeleteQRFromHistoryAsync(_qr)) />
        </div>

        <h2 class="mt-2 max-w-[90vw] break-words text-xl font-bold">@(_qr?.Value)</h2>
    }
</div>

<TabBar />

@code {
    [Parameter]
    public string? Id { get; set; }

    private QRModel? _qr;
    private byte[] _qrBytes = [];
    private string? _qrImageBase64;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await JSRuntime.InvokeVoidAsync("adjustContentMargin");
    }

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        await base.SetParametersAsync(parameters);

        _qr = await LocalStorageService.GetQRByIdAsync(Id!);

        if (_qr is not null && _qr.Format == BarcodeFormats.QRCode.ToString())
        {
            _qrBytes = QRService.GenerateQRBytes(_qr?.Value);
            _qrImageBase64 = QRService.GetQRBase64(_qrBytes);
        }

        StateHasChanged();
    }

    private async Task ToggleFavoriteAsync()
    {
        _qr = await QRService.ToggleQRFavoriteAsync(_qr!.Id, new QRModel { Favorite = !_qr.Favorite });
        await Toast.Make($"{(_qr?.Favorite ?? false ? "Added to" : "Removed from")} Favorites").Show();

        StateHasChanged();
    }
}
