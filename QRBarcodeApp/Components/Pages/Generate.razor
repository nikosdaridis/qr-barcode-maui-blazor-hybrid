@page "/generate"
@page "/generate/{QRText}"

@inject LocalStorageService LocalStorageService
@inject QRService QRService
@inject IJSRuntime JSRuntime

<TabHeader Name="Generate" HandleInput="HandleInputAsync" InputPlaceholder="Enter Text" />

<div class="main-content flex w-[90vw] flex-col items-center gap-4">
    @if (_qrImageBase64 is not null)
    {
        <img class="w-[70vw] rounded-xl" src="@_qrImageBase64" />

        <div class="grid w-[50vw] gap-4 text-lg font-semibold">
            <button class="bg-blue-500 p-3" @onclick="() => QRService.SaveQRToGalleryAsync(_qrBytes)">Save To Gallery</button>
            <button class="bg-emerald-500 p-3" @onclick="() => QRService.ShareQRAsync(_qrBytes)">Share Image</button>

            @if (_showSaveToHistoryButton)
            {
                <button class="bg-orange-600 p-3" @onclick="HandleSaveToHistoryAsync">Save To History</button>
            }
        </div>
    }
</div>

@code {
    [Parameter]
    public string? QRText { get; set; }

    private byte[] _qrBytes = [];
    private string? _qrImageBase64;
    private bool _showSaveToHistoryButton;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await JSRuntime.InvokeVoidAsync("adjustContentMargin");
    }

    protected override async Task OnInitializedAsync()
    {
        await LocalStorageService.SaveActiveTabAsync("/generate");
    }

    private async Task HandleInputAsync(ChangeEventArgs e)
    {
        QRText = e.Value?.ToString();
        _qrBytes = QRService.GenerateQRBytes(QRText);
        _qrImageBase64 = QRService.GetQRBase64(_qrBytes);
        _showSaveToHistoryButton = !await QRService.QRExistsInHistoryAsync(QRText);

        StateHasChanged();
    }

    private async Task HandleSaveToHistoryAsync()
    {
        _showSaveToHistoryButton = !await QRService.SaveQRToHistoryAsync(QRText);
    }
}
