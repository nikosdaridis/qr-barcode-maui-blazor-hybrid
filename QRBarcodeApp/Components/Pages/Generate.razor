@page "/generate"
@page "/generate/{QRText}"

@inject LocalStorageService LocalStorageService

<h1 class="text-2xl">Generate</h1>

<input class="bg-slate-300 text-slate-950" type="text" value="@QRText" @oninput="HandleInput" placeholder="Enter Text" />

@if (_QRImageBase64 is not null)
{
    <img class="fill-white" src="@_QRImageBase64" height="300" width="300" />

    <div class="grid gap-2">
        <button class="p-3 bg-blue-500" @onclick="SaveQRAsync">Save To Gallery</button>
        <button class="p-3 bg-emerald-500" @onclick="ShareQRAsync">Share Image</button>

        @if (_showSaveToHistoryButton)
        {
            <button class="p-3 bg-stone-500" @onclick="SaveQRToHistoryAsync">Save To History</button>
        }
    </div>
}

@code {
    [Parameter]
    public string? QRText { get; set; }

    private byte[]? _QRBytes;
    private string? _QRImageBase64;
    private bool _showSaveToHistoryButton;

    protected override async Task OnInitializedAsync()
    {
        await LocalStorageService.SaveActiveTabAsync("/generate");
    }

    private void HandleInput(ChangeEventArgs e)
    {
        QRText = e.Value?.ToString();
        GenerateQRCodeAsync();
    }

    private async void GenerateQRCodeAsync()
    {
        if (string.IsNullOrWhiteSpace(QRText))
        {
            _QRBytes = null;
            _QRImageBase64 = null;
            return;
        }

        QRCodeGenerator qrGenerator = new QRCodeGenerator();
        QRCodeData qrCodeData = qrGenerator.CreateQrCode(QRText, QRCodeGenerator.ECCLevel.L);

        PngByteQRCode qRCode = new PngByteQRCode(qrCodeData);

        _QRBytes = qRCode.GetGraphic(20);
        _QRImageBase64 = $"data:image/png;base64,{Convert.ToBase64String(_QRBytes)}";
        _showSaveToHistoryButton = !await QRExistsInHistoryAsync();

        StateHasChanged();
    }

    private async void SaveQRAsync()
    {
        if (_QRBytes is null)
            return;

        await MediaGallery.SaveAsync(MediaFileType.Image, _QRBytes, "QR.png");
    }

    private async void ShareQRAsync()
    {
        if (_QRBytes is null)
            return;

        string path = FileSystem.Current.CacheDirectory;
        string fileName = "QRCode.png";
        string fullPath = Path.Combine(path, fileName);

        await File.WriteAllBytesAsync(fullPath, _QRBytes);
        string file = Path.Combine(FileSystem.CacheDirectory, fileName);

        await Share.Default.RequestAsync(new ShareFileRequest
            {
                Title = "Share QR Code",
                File = new ShareFile(file)
            });
    }

    private async Task SaveQRToHistoryAsync()
    {
        BarcodeResult QR = new BarcodeResult() { RawValue = QRText, BarcodeType = BarcodeTypes.Text, BarcodeFormat = BarcodeFormats.QRCode };
        await LocalStorageService.SaveQRAsync(QR);
        _showSaveToHistoryButton = false;
    }

    private async Task<bool> QRExistsInHistoryAsync()
    {
        List<QRModel> QRHistory = await LocalStorageService.GetQRAllAsync();

        return QRHistory.Any(qr => qr.Value == QRText);
    }
}
