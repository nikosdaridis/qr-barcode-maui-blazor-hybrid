@page "/generate/{Type}/{Format}"

@inject NavigationManager NavigationManager
@inject LocalStorageService LocalStorageService
@inject IJSRuntime JSRuntime

<TabHeader Name="@($"Generate {Format}")" />

<div class="main-content grid w-[90vw] gap-2">
    @if (_model is not null)
    {
        <EditForm Model=@_model OnValidSubmit="HandleSubmitAsync">
            <DataAnnotationsValidator />
            <ValidationSummary />
            @foreach (PropertyInfo property in _model.GetType().GetProperties())
            {
                <label class="my-2" for="@property.Name">@property.Name</label>
                if (_model is WiFiModel && property.Name == "EncryptionType")
                {
                    <select class="border-input focus-visible:ring-ring w-[90vw] rounded-xl border bg-[--primary-color] p-2 placeholder-gray-400 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-2"
                            @onchange="@((ChangeEventArgs e) => SetValue(property, e.Value))">
                        <option value="WPA/WPA2">WPA/WPA2</option>
                        <option value="WEP">WEP</option>
                    </select>
                }
                else
                {
                    object? propertyValue = property.GetValue(_model);

                    if (property.PropertyType == typeof(DateTime) && propertyValue is not null)
                        propertyValue = ((DateTime)propertyValue).ToString("yyyy-MM-ddTHH:mm");

                    <input class="border-input focus-visible:ring-ring w-[90vw] rounded-xl border bg-[--primary-color] p-2 placeholder-gray-400 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-2"
                           type="@GetInputType(property)"
                           value="@propertyValue"
                           step="@(property.PropertyType == typeof(double) || Nullable.GetUnderlyingType(property.PropertyType) == typeof(double) ? "0.000001" : "1")"
                           @onchange="@((ChangeEventArgs e) => SetValue(property, e.Value))" />
                }
            }
            <button class="mt-4 rounded-xl bg-[--primary-color] p-3 text-2xl" type="submit" @ref="_generateButton"
                    @onclick="@(async () => await JSRuntime.InvokeVoidAsync("playButtonAnimation", _generateButton))">
                Generate
            </button>
        </EditForm>
    }
</div>

<TabBar />

@code {
    [Parameter]
    public string? Type { get; set; }

    [Parameter]
    public string? Format { get; set; }

    private IGenerateModel? _model;
    private ElementReference _generateButton;

    /// <summary>
    /// Adjusts content margin according to TabHeader and TabBar
    /// </summary>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await JSRuntime.InvokeVoidAsync("adjustContentMargin");
    }

    /// <summary>
    /// Initializes code generate model based on type and format
    /// </summary>
    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        if (string.IsNullOrWhiteSpace(Type) || string.IsNullOrWhiteSpace(Format))
            return;

        _model = Format switch
        {
            "Code128" => new Code128Model(),
            "Code39" => new Code39Model(),
            "Code93" => new Code93Model(),
            "CodaBar" => new CodaBarModel(),
            "Ean13" => new Ean13Model(),
            "Ean8" => new Ean8Model(),
            "Itf" => new ItfModel(),
            "Upca" => new UpcaModel(),
            "Upce" => new UpceModel(),
            "I2OF5" => new I2OF5Model(),
            _ => null
        };

        if (_model is not null)
            return;

        _model = Type switch
        {
            "Text" => new TextModel(),
            "Url" => new UrlModel(),
            "Email" => new EmailModel(),
            "WiFi" => new WiFiModel(),
            "GeographicCoordinates" => new GeographicCoordinatesModel(),
            "ContactInfo" => new ContactInfoModel(),
            "CalendarEvent" => new CalendarEventModel(),
            "Phone" => new PhoneModel(),
            "Sms" => new SmsModel(),
            _ => new TextModel()
        };
    }

    /// <summary>
    /// Retrieves input type for property based on property name or property type
    /// </summary>
    private string GetInputType(PropertyInfo property)
    {
        string inputType = "";

        inputType = property.Name switch
        {
            "Ean13" or "Ean8" or "Itf" or "Upca" or "Upce" or "I2OF5" => "number",
            _ => ""
        };

        if (!string.IsNullOrWhiteSpace(inputType))
            return inputType;

        System.Type type = Nullable.GetUnderlyingType(property.PropertyType) ?? property.PropertyType;

        inputType = type.Name switch
        {
            "String" => "text",
            "UInt64" or "Double" => "number",
            "DateTime" => "datetime-local",
            _ => "text"
        };

        return inputType;
    }

    /// <summary>
    /// Sets value of property on generate model
    /// </summary>
    private void SetValue(PropertyInfo property, object? value)
    {
        if (string.IsNullOrWhiteSpace(value?.ToString()))
            property.SetValue(_model, null);
        else
        {
            try
            {
                property.SetValue(_model, Convert.ChangeType(value, Nullable.GetUnderlyingType(property.PropertyType) ?? property.PropertyType));
            }
            catch
            {
                return;
            }
        }
    }

    /// <summary>
    /// Saves generated code and navigates to details tab
    /// </summary>
    private async Task HandleSubmitAsync()
    {
        if (_model is null)
            return;

        // Sets type to Isbn if Ean13 starts with 978 or 979
        if (_model is Ean13Model && _model.GetValue().StartsWith("978") || _model.GetValue().StartsWith("979"))
            Type = "Isbn";

        string id = await LocalStorageService.SaveCodeAsync(_model!.GetValue(), Type!, Format!, "Generated");

        NavigationManager.NavigateTo($"/details/{id}");
    }
}
