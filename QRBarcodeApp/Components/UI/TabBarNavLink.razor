@inject NavigationManager NavigationManager
@inject LocalStorageService LocalStorageService

@if (TabName == "scan")
{
    <div class="tab-bar-nav-link flex flex-1 items-center justify-center" @onclick="ShowCameraScannerPopupAsync">
        <img class="h-[30px] w-[30px]" src="icons/scan.svg" />
    </div>
}
else if (!string.IsNullOrWhiteSpace(TabName) && !string.IsNullOrWhiteSpace(_activeTab))
{
    <NavLink class="tab-bar-nav-link flex flex-1 items-center justify-center" href="@($"/{TabName}")">
        <img class="@(_activeTab.Contains(TabName) ?"active" : "") h-[30px] w-[30px] transition duration-300 ease-in-out"
             src="@($"icons/{TabName}{(_activeTab!.Contains(TabName) ? "-active" : "")}.svg")" />
    </NavLink>
}

@code {
    [Parameter]
    public string? TabName { get; set; }

    private string? _activeTab;
    private bool _isPopupShown;

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        await base.SetParametersAsync(parameters);

        string currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        int indexOfSlash = currentUrl.IndexOf('/');

        if (indexOfSlash != -1)
            _activeTab = currentUrl.Substring(0, indexOfSlash);
        else
            _activeTab = currentUrl;
    }

    private async Task ShowCameraScannerPopupAsync()
    {
        if (_isPopupShown)
            return;

        _isPopupShown = true;

        try
        {
            await App.Current!.MainPage!.ShowPopupAsync(new CameraScanner(NavigationManager, LocalStorageService));
        }
        finally
        {
            _isPopupShown = false;
        }
    }
}
