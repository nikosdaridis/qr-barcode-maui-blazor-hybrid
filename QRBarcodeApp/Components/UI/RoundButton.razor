@if (!string.IsNullOrWhiteSpace(IconPath))
{
    <div>
        <button class="@GetButtonClass() rounded-full bg-[--primary-color] p-3"
                @ref=_button @onclick=HandleOnClickAsync>
            <img class=@IconCSS src=@IconPath />
        </button>
        @if (Text is not null)
        {
            <h3 class="mt-2 text-sm">@Text</h3>
        }
    </div>
}

@code {
    [Parameter]
    public IJSRuntime? JSRuntime { get; set; }

    [Parameter]
    public string? IconPath { get; set; }

    [Parameter]
    public string? IconCSS { get; set; } = "h-[30px] w-[30px]";

    [Parameter]
    public MarkupString? Text { get; set; }

    [Parameter]
    public EventCallback<MouseEventArgs> HandleClick { get; set; }

    private ElementReference _button;

    /// <summary>
    /// Retrieves button CSS class based on icon file path
    /// </summary>
    private string GetButtonClass()
    {
        string baseClass = IconPath switch
        {
            string path when path.Contains("share") => "share",
            string path when path.Contains("favorite") => "favorite",
            string path when path.Contains("delete") => "delete",
            _ => "action"
        };

        return $"{baseClass}-button";
    }

    /// <summary>
    /// Plays button animation and invokes callback
    /// </summary>
    private async Task HandleOnClickAsync(MouseEventArgs args)
    {
        if (JSRuntime is not null)
            await JSRuntime.InvokeVoidAsync("playButtonAnimation", _button);

        if (HandleClick.HasDelegate)
            await HandleClick.InvokeAsync(args);
    }
}
